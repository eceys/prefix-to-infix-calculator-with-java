
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author emrah
 */
public class polishNotasyonu extends javax.swing.JFrame {

    /**
     * Creates new form polishNotasyonu
     */
    public polishNotasyonu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Polish Notasyonu");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Girdi");

        jLabel2.setText("Çıktı");

        jButton1.setText("Hesapla");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField2)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    //Global Değişkenler
    String girdi;
    Stack<String> operandlar = new Stack<String>();
    Stack<String> numerikler = new Stack<String>();
    int sonuc = 0;
    int kontrol = 0;
    
    public int islem(String operand, int ifade1, int ifade2){
        jTextArea1.append("Operand : " + operand + "\tSayı : " + ifade2 + "\tSayı : " + ifade1);
        if(operand.equals("+")){
            jTextArea1.append("\tSonuç : " + (ifade1 + ifade2) + "\n");
            return ifade1 + ifade2;  
        }else if(operand.equals("-")) {
            jTextArea1.append("\tSonuç : " + (ifade1 - ifade2) + "\n");
            return ifade1 - ifade2;
        }else if(operand.equals("*")) {
            jTextArea1.append("\tSonuç : " + (ifade1 * ifade2) + "\n");
            return ifade1 * ifade2;
        }else{
            jTextArea1.append("\tSonuç : " + (ifade1 / ifade2) + "\n");
            return ifade1 / ifade2;
        }
    }

    
    public void hesaplama(){
        String[] ayrismisDizi = girdi.split(" ");
        for(int a = 0 ; a < ayrismisDizi.length ; a++){
            
            if(ayrismisDizi[a].equals("*") || ayrismisDizi[a].equals("+") || ayrismisDizi[a].equals("-") || ayrismisDizi[a].equals("/")){
                    operandlar.push(ayrismisDizi[a]);
                    kontrol = 2;
                }else{
                    
                    if(numerikler.size() >= 1 && kontrol == 1){
                        
                        numerikler.push(ayrismisDizi[a]);
                        
                        int sayi_1 = Integer.parseInt(numerikler.pop());
                        int sayi_2 = Integer.parseInt(numerikler.pop());
                        
                        String operand = operandlar.pop();
                        sonuc = islem(operand, sayi_1, sayi_2);
                        
                        numerikler.push(String.valueOf(sonuc));
                        kontrol = 1;  
                        
                        if (numerikler.size() == 2 && kontrol == 1){
                            int sayi_3 = Integer.parseInt(numerikler.pop());
                            int sayi_4 = Integer.parseInt(numerikler.pop());
                        
                            String operand_1 = operandlar.pop();
                            sonuc = islem(operand_1, sayi_3, sayi_4);
                        
                            numerikler.push(String.valueOf(sonuc));
                            kontrol = 1;  
                        }    
                    }else{
                        numerikler.push(ayrismisDizi[a]);
                        kontrol = 1;
                        
                    }
                    
                }
                
            }
    }
    
    public void bilgilendirme(String baslik, String message){
        JOptionPane.showMessageDialog(this, message, baslik, JOptionPane.INFORMATION_MESSAGE);
    }
    
    public static void ekranOrtalama(Window pencere) {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - pencere.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - pencere.getHeight()) / 2);
        /*Ekranın x ve y uzunluklarından programın x ve y uzunları çıkartılıp 2'ye bölünür.
        Bu sayede orta nokta bulunmuş olur.*/
        pencere.setLocation(x, y);
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        ekranOrtalama(this);
        jTextField2.setEditable(false);
        jTextField1.setText("* + * + 1 2 + 3 4 5 6");
        
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            jTextArea1.setText("");
            operandlar.clear();
            numerikler.clear();
            sonuc = 0;
            kontrol = 0;
            if(!jTextField1.getText().equals("")){
                girdi = jTextField1.getText();
                hesaplama();
                jTextField2.setText(String.valueOf(sonuc));
                jTextField1.setText("");
            }else{
                jTextField2.setText("");
                bilgilendirme("Bilgilendirme","Girdi alanı boş bırakılamaz.");
            }
            
        }catch(Exception e){
            bilgilendirme("Hata","Bir şey ters gitti.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(polishNotasyonu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(polishNotasyonu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(polishNotasyonu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(polishNotasyonu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new polishNotasyonu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
